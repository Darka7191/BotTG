import os
import json
import asyncio
import tempfile
import logging
import sys
import locale
from telethon import functions
from telethon import TelegramClient
from telethon.sessions import StringSession
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, StateFilter
from aiogram.types import FSInputFile, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.enums import ParseMode, ContentType
from aiogram.client.default import DefaultBotProperties
from cryptography.fernet import Fernet
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.exceptions import TelegramBadRequest
from telethon.errors import SessionPasswordNeededError
from aiogram.types import Message
from typing import Union
from telethon.tl.types import User, Chat, Channel, ChatForbidden, DialogFilterDefault, MessageEntityCustomEmoji, \
    MessageEntityBlockquote
from telethon.tl.types import (
    MessageEntityBold, MessageEntityItalic, MessageEntityUnderline,
    MessageEntityStrike, MessageEntityCode, MessageEntityPre,
    MessageEntityTextUrl, MessageEntityCustomEmoji
)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "7756390652:AAHdh2BzueaaNW_YzZKFTjFtok2SRnXRWVI" #–¢–û–ö–ï–ù –ù–ï –ó–ê–ë–£–î–¨ –ò–ó–ú–ï–ù–ò–¢–¨ –î–û–õ–ë–ï–ù–¨)))
ADMIN_IDS = [8041841804] #–ò –°–í–û–ô –ê–ô–î–ò –í–ü–ò–®–ò –î–û–õ–ë–ï–ù–¨)))
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telethon
API_ID = 20650580  # –í–∞—à API ID –∏–∑ my.telegram.org
API_HASH = 'd567be9ad0d5c77f012568a55db87cec'  # –í–∞—à API HASH
sys.stdout.reconfigure(encoding='utf-8')
sys.stderr.reconfigure(encoding='utf-8')
locale.setlocale(locale.LC_ALL, 'ru_RU.UTF-8')

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
USERS_DB = "users.json"
SUBS_DB = "subscriptions.json"
SESSIONS_DB = "sessions.json"
SPAM_SETTINGS_DB = "spam_settings.json"
KEY_FILE = "secret.key"
WELCOME_IMG = "welcome_photo.jpg"
PAYMENT_IMG = "payments.jpg"
SPAMMER_IMG = "spammer.jpg"
GLEINT_IMG = "welcome_photo.jpg"
photo = FSInputFile("images/welcome_photo.jpg")
photo2 = FSInputFile("images/payments.jpg")
photo3 = FSInputFile("images/spammer.jpg")
photo4 = FSInputFile("images/welcome_photo.jpg")
SUBSCRIPTION_LOGS = "subscription_logs.json"
favorites_db = "favorites.json"
user_spam_states = {}
spam_tasks = {}
auth_clients = {}
active_spam_tasks = {}

if not os.path.exists(SUBSCRIPTION_LOGS):
    with open(SUBSCRIPTION_LOGS, 'w', encoding='utf-8') as f:
        json.dump([], f)

if not os.path.exists(KEY_FILE):
    with open(KEY_FILE, 'wb') as f:
        f.write(Fernet.generate_key())

with open(KEY_FILE, 'rb') as f:
    cipher = Fernet(f.read())


async def on_startup():
    if not os.path.exists(SPAM_SETTINGS_DB):
        save_db(SPAM_SETTINGS_DB, {})

    if not os.path.exists(WELCOME_IMG):
        logger.warning(f"–§–∞–π–ª {WELCOME_IMG} –Ω–µ –Ω–∞–π–¥–µ–Ω!")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class SubManageStates1(StatesGroup):
    WAITING_USER_ID = State()

class AdminStates(StatesGroup):
    WAITING_USER_ID = State()
    WAITING_DAYS = State()
    WAITING_PLUS_USER_ID = State()
    WAITING_PLUS_DAYS = State()
    WAITING_REMOVE_USER_ID = State()
    WAITING_REMOVE_PLUS_USER_ID = State()
    WAITING_REJECT_REASON = State()

class AuthStates(StatesGroup):
    WAITING_PHONE = State()
    WAITING_CODE = State()
    WAITING_PASSWORD = State()

class BuySub(StatesGroup):
    waiting_for_duration = State()
    waiting_for_receipt = State()

class SubManageStates(StatesGroup):
    WAITING_USER_ID = State()
    WAITING_DAYS = State()
    WAITING_CONTEXT = State()
    WAITING_PLUS_DATA = State()
    WAITING_REVOKE_USER_ID = State()
    WAITING_REMOVE_USER_ID = State()

class SpamStates(StatesGroup):
    WAITING_USERNAME = State()
    WAITING_SELECTED_CHAT = State()
    WAITING_FOLDER = State()
    WAITING_DELAY = State()
    WAITING_MESSAGE = State()
    WAITING_MEDIA = State()

class BroadcastStates(StatesGroup):
    WAITING_TEXT = State()
    WAITING_MEDIA = State()
    WAITING_FILTER = State()
    WAITING_CONFIRM = State()

def encrypt_sessions(data):
    return cipher.encrypt(json.dumps(data).encode()).decode()

def save_encrypted_sessions(data):
    with open(SESSIONS_DB, 'w', encoding='utf-8') as f:
        f.write(encrypt_sessions(data))

def load_db(file_path):
    if not os.path.exists(file_path):
        return {}

    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read().strip()
        if not content:
            return {}
        return json.loads(content)


def message_entity_to_dict(entity):
    entity_dict = {
        'type': entity.type,
        'offset': entity.offset,
        'length': entity.length,
    }

    if hasattr(entity, 'url'):
        entity_dict['url'] = entity.url
    if hasattr(entity, 'language'):
        entity_dict['language'] = entity.language
    if hasattr(entity, 'custom_emoji_id'):
        entity_dict['custom_emoji_id'] = entity.custom_emoji_id

    return entity_dict

def save_db(file_path: str, data: dict):
    try:
        dirname = os.path.dirname(file_path)
        if dirname:
            os.makedirs(dirname, exist_ok=True)

        with open(file_path, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=4)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
        raise

def load_spam_settings(user_id: str):
    settings = load_db(SPAM_SETTINGS_DB)
    if user_id in settings:
        user_spam_states[user_id] = settings[user_id]
        if user_spam_states[user_id].get('send_to_all'):
            user_spam_states[user_id]['send_mode'] = '–í–æ –≤—Å–µ —á–∞—Ç—ã'
        elif user_spam_states[user_id].get('folder'):
            user_spam_states[user_id]['send_mode'] = f'–ü–∞–ø–∫–∞: {user_spam_states[user_id]["folder"]}'
        elif user_spam_states[user_id].get('username'):
            user_spam_states[user_id]['send_mode'] = f'–ß–∞—Ç: @{user_spam_states[user_id]["username"]}'
        else:
            user_spam_states[user_id]['send_mode'] = '–ù–µ –≤—ã–±—Ä–∞–Ω'


class UserManager:
    def __init__(self):
        self.users = load_db(USERS_DB)
        self.subs = load_db(SUBS_DB)

    def is_premium(self, user_id: str) -> bool:
        user_id = str(user_id)
        return self.users.get(user_id, {}).get("premium", False)

    def set_premium(self, user_id: str, status: bool):
        user_id = str(user_id)
        if user_id in self.users:
            self.users[user_id]["premium"] = status
            save_db(USERS_DB, self.users)
            return True
        return False

    def get_stats(self):
        total_users = len(self.users)
        active_subs = sum(1 for u in self.users.values() if u.get("subscription"))
        return {
            "total_users": total_users,
            "active_subs": active_subs,
            "inactive_subs": total_users - active_subs
        }

    def add_user(self, user: types.User):
        user_id = str(user.id)
        if user_id not in self.users:
            self.users[user_id] = {
                "username": user.username,
                "full_name": user.full_name,
                "join_date": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                "subscription": False,
                "sub_end": None
            }
            save_db(USERS_DB, self.users)
            return True
        return False

    def give_sub(self, user_id: str, days: int, is_premium: bool = False) -> Union[str, bool]:
        """–í—ã–¥–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è (–∏–ª–∏ False –ø—Ä–∏ –æ—à–∏–±–∫–µ)"""
        user_id = str(user_id)
        if user_id in self.users:
            end_date = (datetime.now() + timedelta(days=days)).strftime("%Y-%m-%d %H:%M:%S")
            self.users[user_id].update({
                "subscription": True,
                "sub_end": end_date,
                "premium": is_premium
            })
            save_db(USERS_DB, self.users)
            return end_date
        return False

user_manager = UserManager()
sessions = load_db(SESSIONS_DB)

assert 'ADMIN_IDS' in globals(), "ADMIN_IDS –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã"
assert 'user_manager' in globals(), "user_manager –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
assert 'logger' in globals(), "logger –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"

def main_kb():
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="spam_menu"),
    )
    builder.row(
        InlineKeyboardButton(text="üí∞ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="buy_standard"),
        InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")
    )
    builder.row(
        InlineKeyboardButton(text="üõü –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/gleintvein")
    )
    return builder.as_markup()


def log_subscription(user_id: int, action: str, days: int = None, reason: str = None):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π —Å –ø–æ–¥–ø–∏—Å–∫–æ–π"""
    log_entry = {
        "user_id": user_id,
        "action": action,
        "date": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "days": days,
        "reason": reason
    }

    logs = load_db(SUBSCRIPTION_LOGS)
    logs.append(log_entry)
    save_db(SUBSCRIPTION_LOGS, logs)

class AdminPanel(StatesGroup):
    waiting_for_broadcast_text = State()

@dp.message(Command("admin"))
async def cmd_admin(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"),
        InlineKeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="broadcast"),
    )
    builder.row(
        InlineKeyboardButton(text="‚≠ê –í—ã–¥–∞—Ç—å –ü–æ–¥–ø–∏—Å–∫—É", callback_data="give_sub"),
        InlineKeyboardButton(text="üîß –ó–∞–±—Ä–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="remove_sub"),
    )
    builder.row(
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="main_menu")
    )

    if os.path.exists(WELCOME_IMG):
        await message.answer_photo(
            photo=FSInputFile(WELCOME_IMG),
            caption="üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=builder.as_markup()
        )
    else:
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=builder.as_markup()
        )


@dp.callback_query(F.data == "broadcast")
async def start_broadcast(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!", show_alert=True)
        return
    await callback.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–ª–∏ '–æ—Ç–º–µ–Ω–∞':")
    await state.set_state(BroadcastStates.WAITING_TEXT)
    await callback.answer()

@dp.message(BroadcastStates.WAITING_TEXT)
async def process_broadcast_text(message: types.Message, state: FSMContext):
    if message.text.lower() == '–æ—Ç–º–µ–Ω–∞':
        await state.clear()
        return await message.answer("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=main_kb())

    await state.update_data(text=message.html_text)
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–µ–¥–∏–∞", callback_data="add_media")],
        [InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –º–µ–¥–∏–∞", callback_data="skip_media")]
    ])
    await message.answer("üìé –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –º–µ–¥–∏–∞-–≤–ª–æ–∂–µ–Ω–∏–µ?", reply_markup=markup)
    await state.set_state(BroadcastStates.WAITING_MEDIA)

@dp.callback_query(F.data == "skip_media", BroadcastStates.WAITING_MEDIA)
async def skip_media(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(media_type=None, media_file_id=None)
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéØ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="filter:all")],
        [InlineKeyboardButton(text="‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="filter:active")],
        [InlineKeyboardButton(text="üö´ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ", callback_data="filter:inactive")]
    ])
    await callback.message.answer("üë• –í—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏—Ç–æ—Ä–∏—é:", reply_markup=markup)
    await state.set_state(BroadcastStates.WAITING_FILTER)
    await callback.answer()

@dp.callback_query(F.data == "add_media", BroadcastStates.WAITING_MEDIA)
async def ask_for_media(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/GIF –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
    await state.set_state(BroadcastStates.WAITING_MEDIA)
    await callback.answer()


@dp.message(BroadcastStates.WAITING_MEDIA)
async def process_media(message: types.Message, state: FSMContext):
    if message.content_type not in {'photo', 'video', 'animation'}:
        await message.answer("‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/GIF!")
        return

    media_type = message.content_type
    file_id = message.photo[-1].file_id if media_type == 'photo' else \
        message.video.file_id if media_type == 'video' else \
            message.animation.file_id

    await state.update_data(
        media_type=media_type,
        media_file_id=file_id,
        has_media=True
    )
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéØ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="filter:all")],
        [InlineKeyboardButton(text="‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="filter:active")],
        [InlineKeyboardButton(text="üö´ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ", callback_data="filter:inactive")]
    ])
    await message.answer("üë• –í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é:", reply_markup=markup)
    await state.set_state(BroadcastStates.WAITING_FILTER)


@dp.callback_query(F.data.startswith("filter:"), BroadcastStates.WAITING_FILTER)
async def select_filter(callback: types.CallbackQuery, state: FSMContext):
    filter_type = callback.data.split(":")[1]
    await state.update_data(filter=filter_type)

    data = await state.get_data()
    text = data.get('text', '')
    media = data.get('media_file_id')

    preview = f"üì¨ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n{text}"
    if media:
        preview += f"\n\nüìé –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ –º–µ–¥–∏–∞ ({data['media_type']})"

    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="confirm_broadcast")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_broadcast")]
    ])

    if media:
        await callback.message.answer_photo(
            photo=data['media_file_id'],
            caption=preview,
            reply_markup=markup
        )
    else:
        await callback.message.answer(preview, reply_markup=markup)


@dp.callback_query(F.data == "cancel_broadcast")
async def cancel_broadcast(callback: types.CallbackQuery, state: FSMContext):
    try:
        await callback.message.delete()
    except TelegramBadRequest:
        pass
    await state.clear()

    if os.path.exists(WELCOME_IMG):
        await callback.message.answer_photo(
            photo=FSInputFile(WELCOME_IMG),
            caption="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=main_kb()
        )
    else:
        await callback.message.answer(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=main_kb()
        )
    await callback.answer("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")

@dp.callback_query(F.data == "confirm_broadcast")
async def send_broadcast(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    users = user_manager.users

    if data['filter'] == 'active':
        users = {uid: u for uid, u in users.items() if u.get('subscription')}
    elif data['filter'] == 'inactive':
        users = {uid: u for uid, u in users.items() if not u.get('subscription')}

    success = 0
    errors = 0
    start_time = datetime.now()

    progress_message = await callback.message.answer(
        f"‚è≥ –ù–∞—á–∞–ª–æ —Ä–∞—Å—Å—ã–ª–∫–∏...\n"
        f"–í—Å–µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {len(users)}\n"
        f"–£—Å–ø–µ—à–Ω–æ: 0\n"
        f"–û—à–∏–±–æ–∫: 0"
    )

    for user_id in users:
        try:
            if data.get('media_file_id'):
                if data['media_type'] == 'photo':
                    await bot.send_photo(
                        chat_id=user_id,
                        photo=data['media_file_id'],
                        caption=data['text'],
                        parse_mode='HTML'
                    )
                else:
                    await bot.send_video(
                        chat_id=user_id,
                        video=data['media_file_id'],
                        caption=data['text'],
                        parse_mode='HTML'
                    )
            else:
                await bot.send_message(
                    chat_id=user_id,
                    text=data['text'],
                    parse_mode='HTML'
                )
            success += 1
        except Exception as e:
            errors += 1

        if (datetime.now() - start_time).seconds % 5 == 0:
            await progress_message.edit_text(
                f"‚è≥ –†–∞—Å—Å—ã–ª–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...\n"
                f"–í—Å–µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {len(users)}\n"
                f"–£—Å–ø–µ—à–Ω–æ: {success}\n"
                f"–û—à–∏–±–æ–∫: {errors}\n"
                f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {round((success + errors)/len(users)*100, 1)}%"
            )

    await progress_message.delete()
    total_time = (datetime.now() - start_time).seconds
    await callback.message.answer(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
        f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ: {success}\n"
        f"‚Ä¢ –û—à–∏–±–æ–∫: {errors}\n"
        f"‚Ä¢ –í—Ä–µ–º—è: {total_time} —Å–µ–∫\n"
        f"‚Ä¢ –°–∫–æ—Ä–æ—Å—Ç—å: {round(success/total_time, 1) if total_time > 0 else 0} —Å–æ–æ–±—â/—Å–µ–∫"
    )
    await state.clear()

@dp.callback_query(F.data == "cancel_broadcast", BroadcastStates.WAITING_CONFIRM)
async def cancel_broadcast(callback: types.CallbackQuery, state: FSMContext):
    try:
        await callback.message.delete()
    except TelegramBadRequest:
        pass
    await state.clear()
    await callback.answer("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")

@dp.callback_query(F.data == "stats")
async def show_stats(callback: types.CallbackQuery):
    try:
        stats = user_manager.get_stats()
        text = (
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{stats['total_users']}</b>\n"
            f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: <b>{stats['active_subs']}</b>\n"
            f"‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: <b>{stats['inactive_subs']}</b>"
        )

        try:
            await callback.message.edit_text(
                text=text
            )
        except Exception as e:
            await callback.message.answer(
                text=text
            )

        await callback.answer()

    except Exception as e:
        logger.error(f"Error in show_stats: {e}")
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    is_new = user_manager.add_user(message.from_user)

    if os.path.exists(WELCOME_IMG):
        photo = FSInputFile(WELCOME_IMG)
        await message.answer_photo(
            photo=photo,
            caption=f"<b>üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.full_name}!</b>\n\n"
                    "–Ø - –±–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram.\n\n"
                    "üõ† <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:</i>",
            reply_markup=main_kb()
        )
    else:
        await message.answer(
            f"<b>üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.full_name}!</b>\n\n"
            "–Ø - –±–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram.\n\n"
            "üõ† <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:</i>",
            reply_markup=main_kb()
        )

    if is_new and message.from_user.id not in ADMIN_IDS:
        for admin_id in ADMIN_IDS:
            try:
                await bot.send_message(
                    chat_id=admin_id,
                    text=f"üÜï –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n"
                         f"ID: <code>{message.from_user.id}</code>\n"
                         f"–ò–º—è: {message.from_user.full_name}\n"
                         f"–Æ–∑–µ—Ä–Ω–µ–π–º: @{message.from_user.username}"
                )
            except TelegramBadRequest as e:
                print(f"Failed to send message to admin {admin_id}: {e}")
                continue

@dp.callback_query(F.data == "main_menu")
async def main_menu(callback: types.CallbackQuery):
    try:
        if os.path.exists(WELCOME_IMG):
            photo = FSInputFile(WELCOME_IMG)
            await callback.message.delete()
            await callback.message.answer_photo(
                photo=photo,
                caption=f"<b>üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {callback.from_user.full_name}!</b>\n\n"
                        "–Ø - –±–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram.\n\n"
                        "üõ† <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:</i>",
                reply_markup=main_kb()
            )
        else:
            await callback.message.edit_text(
                f"<b>üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {callback.from_user.full_name}!</b>\n\n"
                "–Ø - –±–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram.\n\n"
                "üõ† <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:</i>",
                reply_markup=main_kb()
            )
    except TelegramBadRequest:
        if os.path.exists(WELCOME_IMG):
            photo = FSInputFile(WELCOME_IMG)
            await callback.message.answer_photo(
                photo=photo,
                caption=f"<b>üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {callback.from_user.full_name}!</b>\n\n"
                        "–Ø - –±–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram.\n\n"
                        "üõ† <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:</i>",
                reply_markup=main_kb()
            )
        else:
            await callback.message.answer(
                f"<b>üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {callback.from_user.full_name}!</b>\n\n"
                "–Ø - –±–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram.\n\n"
                "üõ† <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:</i>",
                reply_markup=main_kb()
            )
    await callback.answer()

@dp.callback_query(F.data == "spam_menu")
async def spam_menu(callback: types.CallbackQuery, state: FSMContext):
    user_id = str(callback.from_user.id)
    user_data = user_manager.users.get(user_id, {})

    if not user_data.get("subscription"):
        await callback.answer("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞!", show_alert=True)
        return

    if not sessions.get(user_id):
        await state.set_state(AuthStates.WAITING_PHONE)
        await callback.message.answer(
            "<b>üîí –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</b>\n\n"
            "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–∞—Å—Å—ã–ª–∫–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ Telegram API.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π <b>–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b> –≤ —Ñ–æ—Ä–º–∞—Ç–µ +380123456789:",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)]],
                resize_keyboard=True,
                one_time_keyboard=True
            )
        )
        await callback.message.delete()
    else:
        await show_spam_menu(callback.message)


@dp.message(AuthStates.WAITING_PHONE, F.contact | F.text)
async def handle_phone(message: types.Message, state: FSMContext):
    phone = message.contact.phone_number if message.contact else message.text

    try:
        client = TelegramClient(
            StringSession(),
            API_ID,
            API_HASH,
            device_model="Iphone",
            system_version="1.0",
            app_version="1.0"
        )
        await client.connect()
        sent_code = await client.send_code_request(phone)

        auth_clients[message.from_user.id] = client

        await state.update_data({
            'phone': phone,
            'phone_code_hash': sent_code.phone_code_hash
        })
        await state.set_state(AuthStates.WAITING_CODE)

        await message.answer(
            "üì≤ –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑ Telegram (—Ñ–æ—Ä–º–∞—Ç: 1 2 3 4 5):",
            reply_markup=ReplyKeyboardRemove()
        )
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", parse_mode="HTML")
        await state.clear()


@dp.message(AuthStates.WAITING_CODE)
async def handle_code(message: types.Message, state: FSMContext):
    code = message.text.replace(" ", "")
    user_id = message.from_user.id

    client = auth_clients.get(user_id)
    if not client:
        await message.answer("‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return

    data = await state.get_data()
    phone = data.get("phone")
    phone_code_hash = data.get("phone_code_hash")

    try:
        await client.sign_in(phone=phone, code=code, phone_code_hash=phone_code_hash)

        string_session = client.session.save()

        session_path = os.path.join("sessions", f"{user_id}.session")
        os.makedirs("sessions", exist_ok=True)
        with open(session_path, "w") as f:
            f.write(string_session)

        sessions[str(user_id)] = string_session
        save_db(SESSIONS_DB, sessions)

        await message.answer("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
        await state.clear()
        await show_spam_menu(message)

    except SessionPasswordNeededError:
        await state.update_data({'client': client})
        await message.answer("üîê –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞—â–∏—â–µ–Ω –¥–≤—É—Ö—ç—Ç–∞–ø–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
        await state.set_state(AuthStates.WAITING_PASSWORD)

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        await state.clear()


@dp.message(AuthStates.WAITING_PASSWORD, F.text)
async def handle_2fa_password(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    client = user_data['client']
    password = message.text

    try:
        await client.sign_in(password=password)

        session_data = client.session.save()
        sessions[str(message.from_user.id)] = session_data
        save_db(SESSIONS_DB, sessions)

        await message.answer(
            "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n",
            reply_markup=ReplyKeyboardRemove()
        )

        await show_spam_menu(message)

        await state.clear()

    except Exception as e:
        error_message = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –ø–∞—Ä–æ–ª—è: {str(e)}"

        explanation = (
            "\n\n‚ÑπÔ∏è –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            "1. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å\n"
            "2. –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫\n"
            "3. –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º"
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="retry_password")]
        ])

        await message.answer(
            "üîê –î–≤—É—Ö—ç—Ç–∞–ø–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è - —ç—Ç–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞, "
            "–∫–æ—Ç–æ—Ä–∞—è —Ç—Ä–µ–±—É–µ—Ç –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è –ø–æ—Å–ª–µ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n\n"
            f"{error_message}{explanation}",
            reply_markup=keyboard
        )

@dp.callback_query(F.data == "retry_password")
async def retry_password_handler(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å –µ—â–µ —Ä–∞–∑:")
    await state.set_state(AuthStates.WAITING_PASSWORD)
    await callback.answer()


async def show_spam_menu(message_or_callback: Union[types.Message, types.CallbackQuery]):
    user_id = str(message_or_callback.from_user.id)
    state = user_spam_states.get(user_id, {})
    user_data = user_manager.users.get(user_id, {})

    delay = state.get("delay", 3)
    message_text = state.get("message", "‚ùå –ù–µ—Ç—É —Ç–µ–∫—Å—Ç–∞")
    media = state.get("media")
    username = state.get("username")
    folder = state.get("folder")
    send_to_all = state.get("send_to_all", False)

    if send_to_all:
        target = "üåç –í—Å–µ —á–∞—Ç—ã"
    elif folder:
        target = f"üìÇ –ü–∞–ø–∫–∞: {folder}"
    elif username:
        target = f"üë§ @{username}"
    else:
        target = "‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω–æ"

    media_status = "üñºÔ∏è –ï—Å—Ç—å" if media else "‚ùå –ù–µ—Ç—É –º–µ–¥–∏–∏"

    text = (
        "üì¨ <b>–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
        f"üéØ <b>–¶–µ–ª—å:</b> {target}\n"
        f"üí¨ <b>–¢–µ–∫—Å—Ç:</b> {message_text[:50] + '‚Ä¶' if len(message_text) > 50 else message_text}\n"
        f"üñº <b>–ú–µ–¥–∏–∞:</b> {media_status}\n"
        f"‚è± <b>–ò–Ω—Ç–µ—Ä–≤–∞–ª:</b> {delay} —Å–µ–∫\n"
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üéØ –í–æ –≤—Å–µ —á–∞—Ç—ã", callback_data="send_to_all"),
            InlineKeyboardButton(text="üìÇ –ü–∞–ø–∫–∞", callback_data="folder_mode"),
            InlineKeyboardButton(text="üë§ Username", callback_data="send_to_selected")
        ],
        [
            InlineKeyboardButton(text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç", callback_data="write_personal"),
            InlineKeyboardButton(text="üñº –î–æ–±–∞–≤–∏—Ç—å –º–µ–¥–∏–∞", callback_data="set_photo"),
            InlineKeyboardButton(text="‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª", callback_data="set_delay")
        ],
        [
            InlineKeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="start_spam"),
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
        ]
    ])

    try:
        if isinstance(message_or_callback, types.CallbackQuery):
            try:
                await message_or_callback.message.delete()
            except:
                pass
            return await message_or_callback.message.answer_photo(
                photo=photo3,
                caption=text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        else:
            return await message_or_callback.answer_photo(
                photo=photo3,
                caption=text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        return None

@dp.callback_query(F.data == "set_photo")
async def set_media_handler(callback: types.CallbackQuery, state: FSMContext):
    user_id = str(callback.from_user.id)
    current_text = user_spam_states.get(user_id, {}).get("message", "")

    await state.update_data(message_text=current_text)

    try:
        await callback.message.delete()
    except:
        pass

    await callback.message.answer(
        "üì§ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üö´ –£–¥–∞–ª–∏—Ç—å –º–µ–¥–∏–∞", callback_data="remove_media")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="cancel_photo_input")]
        ])
    )
    await state.set_state(SpamStates.WAITING_MEDIA)
    await callback.answer()

@dp.callback_query(F.data == "remove_photo")
async def remove_photo_handler(callback: types.CallbackQuery):
    user_id = str(callback.from_user.id)
    if user_id in user_spam_states and "photo" in user_spam_states[user_id]:
        del user_spam_states[user_id]["photo"]
    await callback.message.edit_text("‚úÖ –§–æ—Ç–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è.")
    await show_spam_menu(callback.message)
    await callback.answer()

@dp.callback_query(F.data == "cancel_photo_input")
async def cancel_photo_input(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await show_spam_menu(callback.message)
    await state.clear()
    await callback.answer()

@dp.callback_query(F.data == "send_to_selected")
async def ask_chat_username(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º —á–∞—Ç–∞ (–±–µ–∑ @):")
    await state.set_state(SpamStates.WAITING_SELECTED_CHAT)
    await callback.answer()


@dp.callback_query(F.data == "send_to_all")
async def set_send_to_all(callback: types.CallbackQuery):
    user_id = str(callback.from_user.id)

    if user_id not in user_spam_states:
        user_spam_states[user_id] = {}

    user_spam_states[user_id]["send_to_all"] = True
    user_spam_states[user_id]["folder"] = None
    user_spam_states[user_id]["username"] = None

    await callback.answer("‚úÖ –¶–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: –≤—Å–µ —á–∞—Ç—ã!")
    await show_spam_menu(callback)

@dp.callback_query(F.data == "folder_mode")
async def folder_mode(callback: types.CallbackQuery, state: FSMContext):
    user_id = str(callback.from_user.id)

    if user_id not in user_spam_states:
        user_spam_states[user_id] = {}

    user_spam_states[user_id]["send_to_all"] = False
    user_spam_states[user_id]["username"] = None

    await state.set_state(SpamStates.WAITING_FOLDER)
    await callback.message.answer("üìÇ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏:")

@dp.callback_query(F.data == "send_to_folder")
async def ask_folder_name(callback: types.CallbackQuery, state: FSMContext):
    user_id = str(callback.from_user.id)
    user_spam_states.setdefault(user_id, {})["send_to_all"] = False
    await callback.message.answer("üìÇ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏:")
    await state.set_state(SpamStates.WAITING_FOLDER)
    await callback.answer()

@dp.callback_query(F.data == "cancel_username_input")
async def cancel_username_input(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("‚ùå –í–≤–æ–¥ username –æ—Ç–º–µ–Ω–µ–Ω")
    await show_spam_menu(callback.message)
    await state.clear()
    await callback.answer()


@dp.callback_query(F.data == "set_delay")
async def set_delay_handler(callback: types.CallbackQuery, state: FSMContext):
    try:
        await callback.message.delete()
    except:
        pass

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="cancel_delay_input")]
        ]
    )

    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–µ—Ä–∂–∫—É –≤ —Å–µ–∫—É–Ω–¥–∞—Ö:",
        reply_markup=keyboard
    )
    await state.set_state(SpamStates.WAITING_DELAY)
    await callback.answer()

@dp.callback_query(F.data == "cancel_delay_input")
async def cancel_delay_input(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("‚ùå –í–≤–æ–¥ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω")
    await show_spam_menu(callback.message)
    await state.clear()
    await callback.answer()

@dp.callback_query(F.data == "continue_spam")
async def continue_spam(callback: types.CallbackQuery):
    user_id = str(callback.from_user.id)
    if user_id in active_spam_tasks and not active_spam_tasks[user_id]['task'].done():
        await callback.answer("‚ÑπÔ∏è –†–∞—Å—Å—ã–ª–∫–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞!")
    else:
        await start_spam(callback)


@dp.message(F.text, SpamStates.WAITING_DELAY)
async def process_delay(message: types.Message, state: FSMContext):
    user_id = str(message.from_user.id)
    text = message.text.strip()

    if not text.isdigit() or int(text) <= 0:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ —Å–µ–∫—É–Ω–¥.")
        return

    delay = int(text)

    user_spam_states.setdefault(user_id, {})["delay"] = delay

    if user_id in active_spam_tasks:
        active_spam_tasks[user_id]['delay'] = delay

    settings = load_db(SPAM_SETTINGS_DB)
    if user_id not in settings or not isinstance(settings[user_id], dict):
        settings[user_id] = {}

    settings[user_id]["last_delay"] = delay
    save_db(SPAM_SETTINGS_DB, settings)

    await message.answer(f"‚úÖ –ó–∞–¥–µ—Ä–∂–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {delay} —Å–µ–∫—É–Ω–¥.")

    if user_id in user_spam_states and "stats_message_id" in user_spam_states[user_id]:
        stats = {
            "sent": active_spam_tasks[user_id].get("sent", 0),
            "failed": active_spam_tasks[user_id].get("failed", 0),
            "start_time": active_spam_tasks[user_id].get("start_time", datetime.now()),
            "last_update": datetime.now()
        }
        await update_stats(message.from_user.id, stats)
    else:
        await show_spam_menu(message)

    await state.clear()

@dp.callback_query(F.data == "write_personal")
async def ask_personal_text(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:")
    await state.set_state(SpamStates.WAITING_MESSAGE)
    await callback.answer()


@dp.callback_query(F.data == "revoke_subscription")
async def revoke_subscription_handler(callback: types.CallbackQuery, state: FSMContext):
    user_id = str(callback.from_user.id)

    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—Ç–∑—ã–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏!", show_alert=True)
        return

    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –æ—Ç–æ–∑–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É:")
    await state.set_state(SubManageStates.WAITING_REVOKE_USER_ID)
    await callback.answer()


@dp.message(SubManageStates.WAITING_REVOKE_USER_ID)
async def process_revoke_subscription(message: types.Message, state: FSMContext):
    try:
        user_id = str(message.text)

        if user_id in user_manager.users:
            user_manager.users[user_id]["subscription"] = False
            user_manager.users[user_id]["premium"] = False
            user_manager.users[user_id]["sub_end"] = None
            save_db(USERS_DB, user_manager.users)

            await message.answer(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–æ–∑–≤–∞–Ω–∞")

            try:
                await bot.send_message(
                    chat_id=int(user_id),
                    text="‚ùå –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—ã–ª–∞ –æ—Ç–æ–∑–≤–∞–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
                )
            except:
                pass
        else:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        await state.clear()


@dp.message(Command("revoke_sub"))
async def revoke_sub_command(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return await message.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞!")

    parts = message.text.split()
    if len(parts) != 2:
        return await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /revoke_sub user_id")

    user_id = parts[1]

    if user_id in user_manager.users:
        user_manager.users[user_id]["subscription"] = False
        user_manager.users[user_id]["premium"] = False
        user_manager.users[user_id]["sub_end"] = None
        save_db(USERS_DB, user_manager.users)

        await message.answer(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—Ç–æ–∑–≤–∞–Ω–∞")

        try:
            await bot.send_message(int(user_id), "‚ùå –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—ã–ª–∞ –æ—Ç–æ–∑–≤–∞–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
        except:
            pass
    else:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")


@dp.message(SpamStates.WAITING_MESSAGE, F.text)
async def process_message_input(message: types.Message, state: FSMContext):
    user_id = str(message.from_user.id)
    if user_id not in user_spam_states:
        user_spam_states[user_id] = {}

    user_spam_states[user_id]["message"] = message.text
    user_spam_states[user_id]["entities"] = [message_entity_to_dict(e) for e in message.entities] if message.entities else []

    custom_emojis = []
    if message.entities:
        for entity in message.entities:
            if entity.type == "custom_emoji":
                custom_emojis.append(message_entity_to_dict(entity))

    user_spam_states[user_id]["custom_emojis"] = custom_emojis
    await message.answer("‚úÖ –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º!")
    await show_spam_menu(message)
    await state.clear()

@dp.callback_query(F.data == "cancel_message_input")
async def cancel_message_input(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("‚ùå –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω")
    await show_spam_menu(callback.message)
    await state.clear()
    await callback.answer()


@dp.message(SpamStates.WAITING_MEDIA, F.content_type.in_({'photo', 'video'}))
async def process_media_input(message: types.Message, state: FSMContext):
    user_id = str(message.from_user.id)
    data = await state.get_data()

    if user_id not in user_spam_states:
        user_spam_states[user_id] = {}

    user_spam_states[user_id]["message"] = data.get("message_text", "")

    if message.photo:
        media_file_id = message.photo[-1].file_id
    elif message.video:
        media_file_id = message.video.file_id
    else:
        await message.answer("‚ö†Ô∏è –¢–æ–ª—å–∫–æ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ!")
        return

    user_spam_states[user_id]["media"] = media_file_id

    await message.answer("‚úÖ –ú–µ–¥–∏–∞ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é!")
    await show_spam_menu(message)
    await state.clear()


@dp.callback_query(F.data == "remove_media")
async def remove_media_handler(callback: types.CallbackQuery):
    user_id = str(callback.from_user.id)
    if user_id in user_spam_states:
        user_spam_states[user_id].pop("photo", None)
        user_spam_states[user_id].pop("video", None)
    await callback.message.edit_text("‚úÖ –ú–µ–¥–∏–∞ —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è.")
    await show_spam_menu(callback.message)
    await callback.answer()


@dp.message(SpamStates.WAITING_FOLDER, F.text)
async def process_folder_name(message: types.Message, state: FSMContext):
    user_id = str(message.from_user.id)
    folder_name = message.text.strip()

    if not folder_name:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
        return

    if user_id not in user_spam_states:
        user_spam_states[user_id] = {}

    user_spam_states[user_id]["folder"] = folder_name
    user_spam_states[user_id]["send_to_all"] = False
    user_spam_states[user_id]["username"] = None

    await state.clear()
    await message.answer(f"‚úÖ –ü–∞–ø–∫–∞ –≤—ã–±—Ä–∞–Ω–∞: {folder_name}")
    await show_spam_menu(message)

@dp.message(SpamStates.WAITING_SELECTED_CHAT, F.text)
async def process_selected_chat(message: types.Message, state: FSMContext):
    user_id = str(message.from_user.id)
    username = message.text.strip().lstrip('@')

    if user_id not in user_spam_states:
        user_spam_states[user_id] = {}

    user_spam_states[user_id].update({
        "username": username,
        "send_mode": f"–ß–∞—Ç: @{username}",
        "send_to_all": False,
        "folder": None
    })

    settings = load_db(SPAM_SETTINGS_DB)
    settings[user_id] = user_spam_states[user_id]
    save_db(SPAM_SETTINGS_DB, settings)

    await message.answer(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–∞—Ç: @{username}")
    await show_spam_menu(message)
    await state.clear()


async def download_and_send_media(client, username, file_id, caption=None):
    try:
        file = await bot.get_file(file_id)
        file_path = file.file_path
        mime_type = getattr(file, 'mime_type', 'application/octet-stream')

        if 'image' in mime_type:
            file_type = 'photo'
        elif 'video' in mime_type:
            file_type = 'video'
        else:
            file_type = 'document'

        with tempfile.NamedTemporaryFile(delete=False) as tmp_file:
            await bot.download_file(file_path, tmp_file.name)

            if file_type == 'photo':
                await client.send_file(username, tmp_file.name, caption=caption, parse_mode='html')
            elif file_type == 'video':
                await client.send_file(username, tmp_file.name, caption=caption,
                                       supports_streaming=True, parse_mode='html')
            else:
                await client.send_file(username, tmp_file.name, caption=caption,
                                       force_document=True, parse_mode='html')

        os.remove(tmp_file.name)
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞: {e}")
        return False

def dict_to_message_entity(entity_dict):
    entity_type = entity_dict['type']
    offset = entity_dict['offset']
    length = entity_dict['length']

    if entity_type == "bold":
        return MessageEntityBold(offset, length)
    elif entity_type == "italic":
        return MessageEntityItalic(offset, length)
    elif entity_type == "underline":
        return MessageEntityUnderline(offset, length)
    elif entity_type == "strikethrough":
        return MessageEntityStrike(offset, length)
    elif entity_type == "code":
        return MessageEntityCode(offset, length)
    elif entity_type == "pre":
        return MessageEntityPre(offset, length, language=entity_dict.get('language', ''))
    elif entity_type == "text_link":
        return MessageEntityTextUrl(offset, length, url=entity_dict['url'])
    elif entity_type == "custom_emoji":
        return MessageEntityCustomEmoji(offset, length, document_id=int(entity_dict['custom_emoji_id']))
    elif entity_type == "blockquote":
        return MessageEntityBlockquote(offset, length)
    else:
        return None

def normalize(text):
    if not isinstance(text, str):
        text = str(text)
    return ''.join(text.casefold().split())

@dp.callback_query(F.data == "start_spam")
async def start_spam(callback: types.CallbackQuery):
    try:
        await callback.message.delete()
    except:
        pass

    user_id = str(callback.from_user.id)

    if user_id not in user_spam_states:
        user_spam_states[user_id] = {}

    state = user_spam_states.get(user_id, {})
    media = state.get("media")
    username = state.get("username")
    message = state.get("message")
    send_to_all = state.get("send_to_all", False)
    folder_name = state.get("folder")

    if not username and not send_to_all and not folder_name:
        await callback.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å (username / –ø–∞–ø–∫–∞ / –≤—Å–µ —á–∞—Ç—ã)!", show_alert=True)
        await show_spam_menu(callback.message)
        return

    if not message or not message.strip():
        await callback.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è!", show_alert=True)
        await callback.message.answer("‚úèÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç.")
        await show_spam_menu(callback.message)
        return

    if user_id in active_spam_tasks:
        task_info = active_spam_tasks[user_id]
        if not task_info['task'].done():
            await callback.answer("‚ö†Ô∏è –†–∞—Å—Å—ã–ª–∫–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞!", show_alert=True)
            return
        else:
            del active_spam_tasks[user_id]

    session_string = sessions.get(user_id)
    if not session_string:
        await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å!", show_alert=True)
        return

    async def send_to_target(client, target, stats, user_id):
        state = user_spam_states.get(user_id, {})
        message_text = state.get("message", "")
        media = state.get("media")
        entities_dicts = state.get("entities", [])
        custom_emojis_dicts = state.get("custom_emojis", [])

        try:
            telethon_entities = []
            for entity_dict in entities_dicts + custom_emojis_dicts:
                entity = dict_to_message_entity(entity_dict)
                if entity:
                    telethon_entities.append(entity)

            if media:
                file = await bot.get_file(media)
                file_path = file.file_path
                ext = file_path.split('.')[-1].lower() if '.' in file_path else ''

                with tempfile.NamedTemporaryFile(delete=False, suffix=f'.{ext}') as tmp_file:
                    await bot.download_file(file_path, tmp_file.name)
                    tmp_path = tmp_file.name

                send_kwargs = {
                    'entity': target,
                    'file': tmp_path,
                    'caption': message_text,
                    'formatting_entities': telethon_entities if telethon_entities else None
                }

                if ext in ['jpg', 'jpeg', 'png', 'webp']:
                    send_kwargs['force_document'] = False
                elif ext in ['mp4', 'mov', 'avi']:
                    send_kwargs['supports_streaming'] = True
                    send_kwargs['force_document'] = False
                else:
                    send_kwargs['force_document'] = True

                await client.send_file(**send_kwargs)
                os.unlink(tmp_path)
            else:
                await client.send_message(
                    entity=target,
                    message=message_text,
                    formatting_entities=telethon_entities if telethon_entities else None
                )

            stats["sent"] += 1
            active_spam_tasks[user_id]['sent'] = stats["sent"]

        except Exception as e:
            stats["failed"] += 1
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ {target}: {e}")
            if 'tmp_path' in locals() and os.path.exists(tmp_path):
                os.unlink(tmp_path)

    async def spam_loop(callback: types.CallbackQuery):
        user_id = str(callback.from_user.id)
        client = None
        try:
            client = TelegramClient(
                StringSession(sessions.get(user_id)),
                API_ID,
                API_HASH
            )
            await client.connect()

            state = user_spam_states.get(user_id, {})
            delay = state.get("delay", 3)
            send_to_all = state.get("send_to_all", False)
            folder_name = state.get("folder")
            username = state.get("username")

            stats = {
                "sent": 0,
                "failed": 0,
                "start_time": datetime.now(),
                "last_update": datetime.now(),
                "delay": delay
            }

            targets = []

            if send_to_all:
                async for dialog in client.iter_dialogs():
                    entity = dialog.entity
                    try:
                        if isinstance(entity, (User, Chat, ChatForbidden)):
                            continue

                        if isinstance(entity, (User, Chat)) or (isinstance(entity, Channel) and not entity.broadcast):
                            if hasattr(entity, "default_banned_rights") and getattr(entity.default_banned_rights,
                                                                                    "send_messages", False):
                                continue
                            targets.append(entity)
                    except Exception as e:
                        stats["failed"] += 1
                        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–∞: {e}")

            elif folder_name:
                try:
                    filters = await client(functions.messages.GetDialogFiltersRequest())
                    target_folder = None
                    for f in filters.filters:
                        if isinstance(f, DialogFilterDefault):
                            continue
                        if normalize(folder_name) in normalize(f.title):
                            target_folder = f
                            break

                    if target_folder and hasattr(target_folder, 'include_peers'):
                        for peer in target_folder.include_peers:
                            try:
                                entity = await client.get_entity(peer)
                                if isinstance(entity, types.User) or getattr(entity, "broadcast", False) is False:
                                    if hasattr(entity, "default_banned_rights") and getattr(
                                            entity.default_banned_rights, "send_messages", False):
                                        continue
                                    targets.append(entity)
                            except Exception as e:
                                stats["failed"] += 1
                                print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è {peer}: {e}")
                    else:
                        await callback.message.answer(f"‚ùå –ü–∞–ø–∫–∞ '{folder_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞!")
                        return
                except Exception as e:
                    await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞–ø–æ–∫: {e}")
                    return

            elif username:
                try:
                    entity = await client.get_entity(username)
                    targets.append(entity)
                except Exception as e:
                    await callback.message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ @{username}: {e}")
                    return

            if not targets:
                await callback.message.answer("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π —Ü–µ–ª–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏!")
                return

            while True:
                if user_id not in active_spam_tasks:
                    break

                current_delay = active_spam_tasks[user_id].get('delay', delay)

                await asyncio.gather(*[send_to_target(client, t, stats, user_id) for t in targets])

                if (datetime.now() - stats["last_update"]).total_seconds() >= 5:
                    try:
                        await update_stats(callback.from_user.id, stats)
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
                    stats["last_update"] = datetime.now()

                for _ in range(current_delay * 10):
                    if user_id not in active_spam_tasks:
                        return
                    await asyncio.sleep(0.1)

        except Exception as e:
            print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ spam_loop: {e}")
            await callback.message.answer(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        finally:
            if client:
                await client.disconnect()
            if user_id in active_spam_tasks:
                del active_spam_tasks[user_id]

    task = asyncio.create_task(spam_loop(callback))
    active_spam_tasks[user_id] = {
        'task': task,
        'delay': state.get("delay", 3),
        'sent': 0,
        'failed': 0,
        'start_time': datetime.now()
    }

    stats_message = await callback.message.answer(
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏:\n"
        f"‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: 0\n"
        f"‚Ä¢ –û—à–∏–±–æ–∫: 0\n"
        f"‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 0 —Å–µ–∫\n"
        f"‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {state.get('delay', 3)} —Å–µ–∫",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é", callback_data="stop_spam_completely"),
            InlineKeyboardButton(text="‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª", callback_data="change_delay")
        ]])
    )

    user_spam_states[user_id]["stats_message_id"] = stats_message.message_id
    await callback.answer("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å!")

async def update_stats(user_id: int, stats: dict):
    user_id = str(user_id)
    if user_id not in user_spam_states:
        return

    state = user_spam_states[user_id]
    if "stats_message_id" not in state:
        return

    duration = (datetime.now() - stats["start_time"]).total_seconds()
    current_delay = active_spam_tasks[user_id].get('delay', 3) if user_id in active_spam_tasks else 3

    try:
        await bot.edit_message_text(
            chat_id=user_id,
            message_id=state["stats_message_id"],
            text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏:\n"
                 f"‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {stats['sent']}\n"
                 f"‚Ä¢ –û—à–∏–±–æ–∫: {stats['failed']}\n"
                 f"‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {int(duration)} —Å–µ–∫\n"
                 f"‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {current_delay} —Å–µ–∫",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é", callback_data="stop_spam_completely"),
                InlineKeyboardButton(text="‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª", callback_data="change_delay")
            ]]))
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")


@dp.callback_query(F.data == "stop_spam_completely")
async def stop_spam_completely(callback: types.CallbackQuery):
    user_id = str(callback.from_user.id)

    task_info = active_spam_tasks.get(user_id)
    if task_info:
        task = task_info.get('task')
        if task and not task.done():
            task.cancel()
            try:
                await task
            except:
                pass

    user_spam_states.pop(user_id, None)
    active_spam_tasks.pop(user_id, None)

    await callback.answer("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏ —Å–±—Ä–æ—à–µ–Ω–∞!")
    await show_spam_menu(callback.message)

@dp.callback_query(F.data == "change_delay")
async def change_delay_handler(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ —Å–µ–∫—É–Ω–¥–∞—Ö:")
    await state.set_state(SpamStates.WAITING_DELAY)
    await callback.answer()


@dp.callback_query(F.data == "profile")
async def show_profile(callback: types.CallbackQuery):
    user_id = str(callback.from_user.id)
    user_data = user_manager.users.get(user_id, {})

    sub_status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞" if user_data.get("subscription") else "‚ùå –ù–µ –∞–∫—Ç–∏–≤–Ω–∞"
    sub_end = user_data.get("sub_end")
    remaining = ""

    if sub_end:
        end_date = datetime.strptime(sub_end, "%Y-%m-%d %H:%M:%S")
        now = datetime.now()
        if end_date > now:
            delta = end_date - now
            days = delta.days
            hours = delta.seconds // 3600
            remaining = f"\nüîπ –û—Å—Ç–∞–ª–æ—Å—å: {days} –¥–Ω. {hours} —á."
        else:
            sub_status = "üîπ –ò—Å—Ç–µ–∫–ª–∞ –ø–æ–¥–ø–∏—Å–∫–∞ / –ò–ª–∏ –Ω–µ—Ç—É —É –≤–∞—Å –ø–æ–¥–ø–∏—Å–∫–∏"

    text = (
        f"<b>üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
        f"üîπ <b>–ò–º—è:</b> {callback.from_user.full_name}\n"
        f"üîπ <b>–Æ–∑–µ—Ä–Ω–µ–π–º:</b> @{callback.from_user.username}\n"
        f"üîπ <b>ID:</b> <code>{callback.from_user.id}</code>\n"
        f"üîπ <b>–ü–æ–¥–ø–∏—Å–∫–∞:</b> {sub_status}{remaining}\n"
        f"üîπ <b>–î–æ:</b> {sub_end or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
    )

    await callback.message.edit_caption(
        caption=text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ])
    )

@dp.callback_query(F.data == "buy_standard")
async def show_subscription_plans(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(BuySub.waiting_for_duration)
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="3 –¥–Ω—è - 60‚Ç¥ / 1.5$", callback_data="sub_duration:3"),
            InlineKeyboardButton(text="7 –¥–Ω–µ–π - 102‚Ç¥ / 5$", callback_data="sub_duration:7")
        ],
        [
            InlineKeyboardButton(text="30 –¥–Ω–µ–π - 420‚Ç¥ / 10$", callback_data="sub_duration:30"),
            InlineKeyboardButton(text="–ù–∞–≤—Å–µ–≥–¥–∞ - 1000‚Ç¥ / 22$", callback_data="sub_duration:999")
        ],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])
    await callback.message.edit_caption(
        caption="<b>üí∞ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏:</b>",
        reply_markup=markup
    )

@dp.callback_query(F.data.startswith("sub_duration:"), StateFilter("*"))
async def select_payment_method(callback: types.CallbackQuery, state: FSMContext):
    days = int(callback.data.split(":")[1])
    await state.update_data(days=days)
    await state.set_state(BuySub.waiting_for_duration)
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞", callback_data="payment_method:card"),
            InlineKeyboardButton(text="‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", callback_data="payment_method:crypto")
        ],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="buy_standard")]
    ])
    duration_text = f"{days} –¥–Ω–µ–π" if days > 0 else "–ù–∞–≤—Å–µ–≥–¥–∞"
    await callback.message.edit_caption(
        caption=f"<b>üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ ({duration_text}):</b>",
        reply_markup=markup
    )


@dp.callback_query(F.data.startswith("payment_method:"), BuySub.waiting_for_duration)
async def handle_payment_selection(callback: types.CallbackQuery, state: FSMContext):
    payment_method = callback.data.split(":")[1]
    await state.update_data(payment_method=payment_method)
    data = await state.get_data()

    payment_info = ""
    if payment_method == "card":
        payment_info = (
            "üí≥ <b>–†–µ–∫–≤–∏–∑–∏—Ç—ã –∫–∞—Ä—Ç—ã:</b>\n"
            "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
            "–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: <code>4441 1144 0855 4812</code>\n"
            "–ü–æ–ª—É—á–∞—Ç–µ–ª—å: –ù–∏–∫–∏—Ç–∞ –ù.\n"
            "–°—É–º–º–∞: "
        )
    else:
        payment_info = (
            "‚Çø <b>–ö—Ä–∏–ø—Ç–æ-—Ä–µ–∫–≤–∏–∑–∏—Ç—ã:</b>\n"
            "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
            "@send: https://t.me/send?start=IVTZvwkcmLWd\n"
            "USDT (TRC20): <code>UQDgfvqrpkcUaMXi8kIq1k4QXeNPrevQdlIrCgAjBxqQDM34</code>\n"
            "TON: <code>UQDgfvqrpkcUaMXi8kIq1k4QXeNPrevQdlIrCgAjBxqQDM34</code>\n"
            "–°—É–º–º–∞: "
        )

    days = data['days']
    amount = {
        3: 60,
        7: 102,
        30: 420,
        999: 1000
    }.get(days, 0)

    payment_info += f"{amount}‚Ç¥\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞ –∏–ª–∏ —Ö–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:"

    await callback.message.edit_caption(
        caption=payment_info,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"sub_duration:{days}")]
        ])
    )
    await state.set_state(BuySub.waiting_for_receipt)


@dp.message(F.photo, BuySub.waiting_for_receipt)
async def handle_receipt(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user_id = message.from_user.id
    days = data.get('days', 0)
    payment_method = data.get('payment_method', 'card')

    markup = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                callback_data=f"confirm_sub:{user_id}:{days}:std"
            ),
            InlineKeyboardButton(
                text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                callback_data=f"reject_sub:{user_id}"
            )
        ]
    ])

    for admin_id in ADMIN_IDS:
        try:
            await bot.send_photo(
                chat_id=admin_id,
                photo=message.photo[-1].file_id,
                caption=(
                    f"üßæ –ù–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂!\n"
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username}\n"
                    f"üÜî ID: {user_id}\n"
                    f"üìÖ –°—Ä–æ–∫: {days if days > 0 else '–ù–∞–≤—Å–µ–≥–¥–∞'} –¥–Ω–µ–π\n"
                    f"üí≥ –ú–µ—Ç–æ–¥: {'–ö–∞—Ä—Ç–∞' if payment_method == 'card' else '–ö—Ä–∏–ø—Ç–∞'}\n\n"
                    f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å:"
                ),
                reply_markup=markup
            )
        except Exception as e:
            logger.error(f"Failed to send to admin {admin_id}: {e}")

    await message.answer(
        "‚úÖ –ß–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.clear()


@dp.callback_query(F.data.startswith("confirm_sub:"))
async def confirm_subscription(callback: types.CallbackQuery):
    try:
        _, user_id_str, days_str, sub_type = callback.data.split(':')
        user_id = int(user_id_str)
        days = int(days_str)

        user_manager.give_sub(user_id_str, days, sub_type == 'plus')

        await bot.send_message(
            user_id,
            f"‚úÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {days} –¥–Ω–µ–π!",
        )

        await callback.message.delete()
        await callback.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞", show_alert=True)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏", show_alert=True)

@dp.callback_query(F.data.startswith("reject_sub:"))
async def reject_subscription(callback: types.CallbackQuery, state: FSMContext):
    parts = callback.data.split(':')
    user_id = parts[1]
    await state.update_data(reject_user_id=user_id)
    await callback.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    await state.set_state(AdminStates.WAITING_REJECT_REASON)
    await callback.answer()


@dp.message(AdminStates.WAITING_REJECT_REASON)
async def process_reject_reason(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user_id = data['reject_user_id']

    try:
        await bot.send_message(
            chat_id=user_id,
            text=f"‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ü—Ä–∏—á–∏–Ω–∞:\n{message.text}"
        )
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}")

    await state.clear()

@dp.callback_query(F.data == "give_sub")
async def ask_user_id_for_sub(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    await state.set_state(SubManageStates.WAITING_USER_ID)
    await callback.answer()

@dp.message(SubManageStates.WAITING_USER_ID)
async def ask_days_for_sub(message: types.Message, state: FSMContext):
    try:
        user_id = int(message.text)
        await state.update_data(user_id=user_id)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π:")
        await state.set_state(SubManageStates.WAITING_DAYS)
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")


@dp.message(SubManageStates.WAITING_DAYS)
async def give_sub_to_user(message: types.Message, state: FSMContext):
    try:
        days = int(message.text)
        data = await state.get_data()
        user_id = data['user_id']

        end_date = user_manager.give_sub(user_id, days)
        if end_date:
            await message.answer(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –≤—ã–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –¥–æ {end_date}")
            await bot.send_message(user_id, f"üéâ –í–∞–º –≤—ã–¥–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –¥–æ {end_date}!")
        else:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–Ω–µ–π")
    finally:
        await state.clear()


@dp.callback_query(F.data == "ungive_sub")
async def ask_user_id_for_unsub(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É:")
    await state.set_state(SubManageStates1.WAITING_USER_ID)
    await callback.answer()


@dp.message(SubManageStates1.WAITING_USER_ID)
async def ungive_sub_to_user(message: types.Message, state: FSMContext):
    try:
        user_id = str(message.text)
        users = load_db(USERS_DB)

        if user_id in users:
            users[user_id]["subscription"] = False
            users[user_id]["sub_end"] = None
            save_db(USERS_DB, users)
            user_manager.users = users

            await message.answer(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—Ç–º–µ–Ω–µ–Ω–∞")
            try:
                await bot.send_message(int(user_id), "‚ùå –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
            except:
                pass
        else:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        await state.clear()


@dp.message(Command("give_sub"))
async def give_sub_command(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return await message.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞!")

    try:
        parts = message.text.split()
        if len(parts) != 3:
            return await message.answer(
                "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/give_sub user_id –¥–Ω–µ–π</code>\n"
                "–ü—Ä–∏–º–µ—Ä: <code>/give_sub 1234567 30</code>",
                parse_mode=ParseMode.HTML
            )

        user_id = parts[1]
        days = int(parts[2])

        end_date = user_manager.give_sub(user_id, days)
        if not end_date:
            return await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

        await message.answer(
            f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –≤—ã–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <code>{user_id}</code>\n"
            f"–°—Ä–æ–∫: {days} –¥–Ω–µ–π (–¥–æ {end_date})",
            parse_mode=ParseMode.HTML
        )

        try:
            await bot.send_message(
                chat_id=user_id,
                text=f"üéâ –í–∞–º –≤—ã–¥–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {days} –¥–Ω–µ–π (–¥–æ {end_date})!"
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            "<code>/give_sub user_id –¥–Ω–µ–π</code>\n"
            "–ü—Ä–∏–º–µ—Ä: <code>/give_sub 1234567 30</code>",
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ give_sub: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –ø–æ–¥–ø–∏—Å–∫–∏")

@dp.message(Command("give_plus"))
async def give_plus_command(message: types.Message):
    """–í—ã–¥–∞—á–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ü–ª—é—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    if message.from_user.id not in ADMIN_IDS:
        return await message.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞!")

    try:
        parts = message.text.split()
        if len(parts) != 3:
            return await message.answer(
                "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/give_plus user_id –¥–Ω–µ–π</code>\n"
                "–ü—Ä–∏–º–µ—Ä: <code>/give_plus 1234567 30</code>",
                parse_mode=ParseMode.HTML
            )

        user_id = parts[1]
        days = int(parts[2])

        success = user_manager.give_sub(user_id, days, is_premium=True)
        if not success:
            return await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

        await message.answer(
            f"‚úÖ –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –≤—ã–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <code>{user_id}</code>\n"
            f"–°—Ä–æ–∫: {days} –¥–Ω–µ–π",
            parse_mode=ParseMode.HTML
        )

        try:
            await bot.send_message(
                chat_id=user_id,
                text=f"üéâ –í–∞–º –≤—ã–¥–∞–Ω–∞ –ü–†–ï–ú–ò–£–ú –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {days} –¥–Ω–µ–π! –¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏."
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            "<code>/give_plus user_id –¥–Ω–µ–π</code>\n"
            "–ü—Ä–∏–º–µ—Ä: <code>/give_plus 1234567 30</code>",
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ give_plus: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –ø–æ–¥–ø–∏—Å–∫–∏")

@dp.callback_query(F.data == "give_plus")
async def ask_plus_user_id(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–¥–∞—á–∏ –ü–ª—é—Å:")
    await state.set_state(AdminStates.WAITING_PLUS_USER_ID)
    await callback.answer()

@dp.message(AdminStates.WAITING_PLUS_USER_ID)
async def ask_plus_days(message: types.Message, state: FSMContext):
    try:
        user_id = int(message.text)
        await state.update_data(user_id=user_id)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –ü–ª—é—Å:")
        await state.set_state(AdminStates.WAITING_PLUS_DAYS)
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

@dp.message(AdminStates.WAITING_PLUS_DAYS)
async def give_plus_sub(message: types.Message, state: FSMContext):
    try:
        days = int(message.text)
        data = await state.get_data()
        user_id = data['user_id']

        if user_manager.give_sub(str(user_id), days, is_premium=True):
            await message.answer(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ü–ª—é—Å –≤—ã–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –Ω–∞ {days} –¥–Ω–µ–π")
            try:
                await bot.send_message(user_id, f"üéâ –í–∞–º –≤—ã–¥–∞–Ω–∞ –ü–†–ï–ú–ò–£–ú –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {days} –¥–Ω–µ–π!")
            except:
                pass
        else:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–Ω–µ–π")
    finally:
        await state.clear()

@dp.callback_query(F.data == "remove_plus")
async def ask_remove_plus_user_id(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–º–µ–Ω—ã –ü–ª—é—Å:")
    await state.set_state(AdminStates.WAITING_REMOVE_PLUS_USER_ID)
    await callback.answer()

@dp.message(AdminStates.WAITING_REMOVE_PLUS_USER_ID)
async def remove_plus_sub(message: types.Message, state: FSMContext):
    try:
        user_id = str(message.text)
        users = load_db(USERS_DB)

        if user_id in users:
            users[user_id]["premium"] = False
            save_db(USERS_DB, users)
            user_manager.users = users

            await message.answer(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ü–ª—é—Å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—Ç–º–µ–Ω–µ–Ω–∞")
            try:
                await bot.send_message(int(user_id), "‚ùå –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –ü–ª—é—Å –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
            except:
                pass
        else:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        await state.clear()

@dp.callback_query(F.data == "remove_sub")
async def ask_remove_sub_user_id(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏:")
    await state.set_state(SubManageStates.WAITING_REMOVE_USER_ID)
    await callback.answer()

@dp.message(SubManageStates.WAITING_REMOVE_USER_ID)
async def remove_sub_from_user(message: types.Message, state: FSMContext):
    try:
        user_id = str(message.text)
        users = load_db(USERS_DB)

        if user_id in users:
            users[user_id]["subscription"] = False
            users[user_id]["sub_end"] = None
            save_db(USERS_DB, users)
            user_manager.users = users

            await message.answer(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—Ç–º–µ–Ω–µ–Ω–∞")
            try:
                await bot.send_message(int(user_id), "‚ùå –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
            except:
                pass
        else:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        await state.clear()

@dp.message(Command("give_plus_sub"))
async def give_plus_sub_command(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        return await message.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞!")

    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–¥–∞—á–∏ –ü–ª—é—Å:")
    await state.set_state(AdminStates.WAITING_PLUS_USER_ID)


@dp.message(Command("remove_plus_sub"))
async def remove_plus_sub_command(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        return await message.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞!")

    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–º–µ–Ω—ã –ü–ª—é—Å:")
    await state.set_state(AdminStates.WAITING_REMOVE_PLUS_USER_ID)

async def main():
    global sessions
    sessions = load_db(SESSIONS_DB)

    await dp.start_polling(bot)

if __name__ == "__main__":
    dp.startup.register(on_startup)
    if not os.path.exists(USERS_DB):
        save_db(USERS_DB, {})
    if not os.path.exists(SUBS_DB):
        save_db(SUBS_DB, {})
    if not os.path.exists(SESSIONS_DB):
        save_db(SESSIONS_DB, {})

    asyncio.run(main())
